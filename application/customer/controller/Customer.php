<?php

namespace app\customer\controller;

use think\Controller;
use think\Db;
use GatewayClient\Gateway;

class Customer extends Controller
{
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    public function index() {

        $name = input('name');
        $id = input('id');
        //查询当前订单是否支付是否超时，是否是假订单
        if(empty($name)){
            echo '<h1>非法请求</h1>';die;
        }

        $user_data = input('customer');

        if(!empty($user_data)){
            $username = '客户'.$name;
            $uid = 'o'.$name;
            $is_kefu = 1;
            session('user_data',$user_data,'customer');
            Db::table('customer')->where('group_id',$name)->where('is_read',0)->update(['is_read'=>1]);
        }else{
            
            $username = '客服';
            $uid = $name;
            $is_kefu = 2;
        }
        $data = Db::table('customer')->where('group_id',$name)->limit(100)->select();

        $group_id = $name;

       // dump($username);
        $data = [
            'is_kefu'=>$is_kefu,
            // 'order_data'=>$order_data,
            'name'=>$uid,
            'username'=>$username,
            'group_id'=>$name,
            'list_data' => $data
        ];
       // dump($data);die;
        return $this->fetch('index',$data);
    }

    public function this_ajax(){
        $id = input('get.id');
        $data = Db::table('content')->where('id','>',$id)->select();
        foreach ($data as $key => $value) {
            $data[$key]['ctime'] = date('H:i:s',$value['ctime']);
        }
        if ($data!=null) {
            return $data;
        }
    }

    public function send_message()
    {
       if (!request()->isAjax()) {
            return $this->redirect('magent/Index/index');
        }
        Gateway::$registerAddress = '127.0.0.1:1238';

        $data = input();

        $data['ctime'] = time();
        if(strpos($data['chatcontent'],'/static/arclist') !== false){
            $data['chatcontent'] = htmlspecialchars_decode($data['chatcontent']);
        }

        $magent = session('user_data','','customer');
        // dump($magent);die;
        if(empty($magent)){
            $data['chatname'] = '客户:'.$data['group_id'];
            $data['chatuserid'] = $data['group_id'];
            $is_kefu = 2;
            $new_data = [
                    'name'=>$data['group_id'],
                    'chat'=>$data['chatcontent'],
                ];

                Gateway::sendToGroup('admin', json_encode(['type'=>'receive_customer_add','data'=>$new_data]));

            }else{
                $data['chatname'] = '客服:'.$magent;
                $data['chatuserid'] = 'o'.$data['group_id'];
                $is_kefu = 1;
                $new_data = [
                'name'=>$data['group_id'],
            ];
            Gateway::sendToGroup('admin', json_encode(['type'=>'receive_customer_less','data'=>$new_data]));
            }

        $add_data = [
            'username'=>$data['chatuserid'],
            'chat'=>$data['chatcontent'],
            'time'=>time(),
            'is_kefu'=>$is_kefu,
            'chatname'=>$data['chatname'],
            'group_id'=>$data['group_id'],
        ];

        // dump($data);die;
        $bool = Db::table('customer')->insert($add_data);
        if($bool){
            $data['ctime'] = date('H:i:s',$data['ctime']);
            Gateway::sendToGroup($data['group_id'], json_encode(['type'=>'receive','data'=>$add_data]));
            return ['code'=>'0000'];
        }else{
            return ['code'=>'1111'];
        }
    }

//上传图片存数据库
    public function upload_img_message()
    {
        if (!request()->isAjax()) {
            return $this->redirect('magent/Index/index');
        }
        Gateway::$registerAddress = '127.0.0.1:1238';

        $data = input();

        $data['ctime'] = time();
        
        $data['chatcontent'] = '<img src='.$data['chatcontent'].' style="width:150px;heigth:150px">';

        $magent = session('user_data','','customer');
        // dump($magent);die;
        if(empty($magent)){
            $data['chatname'] = '客户:'.$data['group_id'];
            $data['chatuserid'] = $data['group_id'];
            $is_kefu = 2;

            $new_data = [
                'name'=>$data['group_id'],
                'chat'=>$data['chatcontent'],
            ];

            Gateway::sendToGroup('admin', json_encode(['type'=>'receive_customer_add','data'=>$new_data]));

        }else{
            $data['chatname'] = '客服:'.$magent;
            $data['chatuserid'] = 'o'.$data['group_id'];
            $is_kefu = 1;
          	$new_data = [
                'name'=>$data['group_id'],
            ];
            Gateway::sendToGroup('admin', json_encode(['type'=>'receive_customer_less','data'=>$new_data]));

        }
         $add_data = [
            'username'=>$data['chatuserid'],
            'chat'=>$data['chatcontent'],
            'time'=>time(),
            'is_kefu'=>$is_kefu,
            'chatname'=>$data['chatname'],
            'group_id'=>$data['group_id'],
        ];
        // dump($data);die;
        $bool = Db::table('customer')->insert($add_data);
        if($bool){
            $data['ctime'] = date('H:i:s',$data['ctime']);
            Gateway::sendToGroup($data['group_id'], json_encode(['type'=>'receive','data'=>$add_data]));
            return ['code'=>'0000'];
        }else{
            return ['code'=>'1111'];
        }
    }

    public function upload(){
    // 获取表单上传文件 例如上传了001.jpg
     $fileKey = array_keys(request()->file());
        // 获取表单上传文件 例如上传了001.jpg
     $file = request()->file($fileKey['0']);
    // 移动到框架应用根目录/public/uploads/ 目录下
    $info = $file->validate(['ext'=>'jpg,png,gif,jpeg'])->move(ROOT_PATH . 'public' . DS . 'code'.DS.'pay');
      
      
    if($info){

        $info_name = '/public' . DS . 'code'.DS.'pay'.DS.$info->getSaveName();
        $image = \think\Image::open(ROOT_PATH.$info_name);
        $image->thumb(300,300)->save(ROOT_PATH.$info_name);
      
        $src = '/code/pay'.DS.$info->getSaveName();
        
        $data = json_encode(['code'=>'0000','msg'=>'上传成功','src'=>$src]);

    }else{
        // 上传失败获取错误信息
        $data = json_encode(['code'=>'60003','msg'=>$file->getError()]);
    }
    echo $data;
}

    //补发回调，改变状态
    public function update_status(){

        $id = input('id');
        //先判断该笔订单是否是自己的
        $user_data = session('login_user','','magent');
        if(empty($user_data)){

            return ['code'=>'1111','msg'=>'账号已掉线，请重新登录'];die;
        }
        $uid = $user_data['id'];

        $order_data = Db::table('mch_order')->where('id',$id)
            ->where('proxy_id',$uid)
            ->limit(1)
            ->find();
        if(empty($order_data)){
            return ['code'=>'1111','msg'=>'非法请求'];die;
        }elseif(($order_data['accept_time'] - time()) > 24*60*60){
            return ['code'=>'1111','msg'=>'回调时间超时'];die;
        }

        $msg = file_get_contents(THIS_URL.'/api/Notify/edit_order.html?id='.$id.'&uid='.$uid);

        Gateway::$registerAddress = '127.0.0.1:1238';
        Gateway::sendToGroup($id, json_encode(['type'=>'carry',]));
        return ['code'=>'0000','msg'=>$msg];

        //Db::



    }
  //订单作废收款账号自动关闭基数减1
    public function order_obsolete(){
   
        $order_id = input('order_id');
        $order_data = Db::table('mch_order')->where('id',$order_id)->limit(1)->find();
        if($order_data['pay_status'] == 3){
            return ['code'=>'1111','msg'=>'该笔订单已作废'];
        }

        $bool1 = Db::table('mch_order')->where('id',$order_id)->update(['pay_status'=>3]);
        $bool2 = Db::table('top_account_assets')->where('id',$order_data['pay_type'])->setDec('receipt');
        if($bool1&&$bool2){
			Gateway::$registerAddress = '127.0.0.1:1238';
  			Gateway::sendToGroup($order_id, json_encode(['type'=>'drop']));
            return ['code'=>'0000','msg'=>'作废成功'];
        }else{
            return ['code'=>'1111','msg'=>'作废失败，请稍后再试'];
        }


    } 

//未读消息列表
    public function manager_list(){

        $data = Db::table('customer')
            ->field('max(time) as time,group_id')
            ->where('is_kefu',2)
            ->group('group_id')
            ->order('time desc')
            ->paginate(15)->each(function($item, $key){
                $item['count_is_read'] = Db::table('customer')
                ->where('is_kefu',2)
                ->where('is_read',0)
                ->where('group_id',$item['group_id'])
                ->count();
          		$item['chat'] = Db::table('customer')
                ->where('is_kefu',2)
                ->where('group_id',$item['group_id'])
                ->order('time desc')
                ->limit(1)
                ->value('chat');
                return $item;
            });
		
        $this->assign('data',$data);
        return $this->fetch();




    }


}