<?php
namespace app\magent\controller;

// use think\cache\driver\Redis;
use think\Db;
use think\Cache;


class Index extends Common
{
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    // 首页
    public function index($bool = false)
    {
      
        // $redis = new Redis();
        $id = $this->login_user['id'];
        // if ($redis->has('magent_data_index_' . $id) && !$bool) {
        if (cache::get('magent_data_index_' . $id) && !$bool) {
            $data = cache::get('magent_data_index_' . $id);
            $this->assign('data', $data);
            $this->assign('uid', $id);
            return $this->fetch();
        }
        $mch_orderModel = Db::name('mch_order');
        //平台总成交订单(笔)
        $order_data['succ_count'] = $mch_orderModel
            ->where('order_type', 1)
            ->where('pay_status', 1)
            ->where('proxy_id', $id)
            ->count('id');
        //平台总成功率(%)
        $order_data['count'] = $mch_orderModel
            ->where('order_type', 1)
            ->where('proxy_id', $id)
            ->count('id');
        //今日平台总成交订单(笔)
        $order_data['today_succ_count'] = $mch_orderModel
            ->whereTime('accept_time', 'today')
            ->where('order_type', 1)
            ->where('pay_status', 1)
            ->where('proxy_id', $id)
            ->count('id');
        //今日平台总成功率(%)
        $order_data['today_count'] = $mch_orderModel
            ->whereTime('accept_time', 'today')
            ->where('order_type', 1)
            ->where('proxy_id', $id)
            ->count('id');

        //昨日平台总成交订单(笔)
        //昨日平台总成交订单(笔)
        $order_data['yesterday_succ_count'] = $mch_orderModel
            ->whereTime('accept_time', 'yesterday')
            ->where('order_type', 1)
            ->where('pay_status', 1)
            ->where('proxy_id', $id)
            ->count('id');
        //昨日平台总成功率(%)
        $order_data['yesterday_count'] = $mch_orderModel
            ->whereTime('accept_time', 'yesterday')
            ->where('order_type', 1)
            ->where('proxy_id', $id)
            ->count('id');
        //昨日平台总成交订单(笔)
        $order_data['week_succ_count'] = $mch_orderModel
            ->whereTime('accept_time', 'week')
            ->where('order_type', 1)
            ->where('pay_status', 1)
            ->where('proxy_id', $id)
            ->count('id');
        //昨日平台总成功率(%)
        $order_data['week_count'] = $mch_orderModel
            ->whereTime('accept_time', 'week')
            ->where('order_type', 1)
            ->where('proxy_id', $id)
            ->count('id');
        $data = $this->index_shoudan();
        $data['daili'] = $this->index_daili();
        $data['rate']['all'] = $order_data['count'] ? number_format($order_data['succ_count'] / $order_data['count'] * 100, 2) : '0.00';
        $data['rate']['today'] = $order_data['today_count'] ? number_format($order_data['today_succ_count'] / $order_data['today_count'] * 100, 2) : '0.00';
        $data['rate']['yesterday'] = $order_data['yesterday_count'] ? number_format($order_data['yesterday_succ_count'] / $order_data['yesterday_count'] * 100, 2) : '0.00';
        $data['rate']['week'] = $order_data['week_count'] ? number_format($order_data['week_succ_count'] / $order_data['week_count'] * 100, 2) : '0.00';
        $users = Db::name('assets')->where('uid', $id)->find();
        $data['user']['margin'] = number_format($users['margin'] / 100, 2);
        $data['user']['freeze'] = number_format($users['freeze'] / 100, 2);
        //系统公告
        $announcement = Db::table('system')->where('id',1)->value('announcement');
        $data['user']['announcement'] = explode('|',$announcement);
        
        cache::set('magent_data_index_' . $id, $data, 600);
        if (!$bool) {
            $this->assign('data', $data);
            $this->assign('uid', $this->login_user['id']);
            return $this->fetch();
        }
    }

    public function index_shoudan()
    {
        $sub = Db::name('users')->where('id', $this->login_user['id'])->value('subordinate');
        // 下级ID集
        $sub = array_filter(explode(',', $sub));
        function getTree($arr, $pid)
        {
            $user = session('login_user', '', 'magent');
            $db = Db::name('mch_order');
            // 上级收单数
            $success_num = $db->where('proxy_id', $pid)->where('pay_status', 1)->where('order_type', 1)->count();
            // 上级总单数
            $all_num = $db->where('proxy_id', $pid)->where('order_type', 1)->count();
            // 上级收单金额
            $success_price = $db->where('proxy_id', $pid)->where('pay_status', 1)->where('order_type', 1)->sum('pay_amount');
            // 上级派单金额
            $all_price = $db->where('proxy_id', $pid)->where('order_type', 1)->sum('pay_amount');
            // 上级今日收单数
            $todayn = $db->where('proxy_id', $pid)->where('pay_status', 1)->whereTime('pay_time', 'today')->where('order_type', 1)->count();
            // 上级昨日收单数
            $yesterdayn = $db->where('proxy_id', $pid)->where('pay_status', 1)->whereTime('pay_time', 'yesterday')->where('order_type', 1)->count();
            // 上级本周收单数
            $weekn = $db->where('proxy_id', $pid)->where('pay_status', 1)->whereTime('pay_time', 'week')->where('order_type', 1)->count();
            // 上级今日入金
            $today = $db->where('proxy_id', $pid)->where('pay_status', 1)->whereTime('pay_time', 'today')->where('order_type', 1)->sum('pay_amount');
            // 上级昨日入金
            $yesterday = $db->where('proxy_id', $pid)->where('pay_status', 1)->whereTime('pay_time', 'yesterday')->where('order_type', 1)->sum('pay_amount');
            // 上级本周入金
            $week = $db->where('proxy_id', $pid)->where('pay_status', 1)->whereTime('pay_time', 'week')->where('order_type', 1)->sum('pay_amount');
            foreach ($arr as $datum) {
                // 下级信息
                $subordinate = Db::name('users')->where('id', $datum)->value('subordinate');
                // 下级收单数
                $success_num += $db->where('proxy_id', $datum)->where('pay_status', 1)->where('order_type', 1)->count();
                // 下级总单数
                $all_num += $db->where('proxy_id', $datum)->where('order_type', 1)->count();
                // 下级收单金额
                $success_price += $db->where('proxy_id', $datum)->where('pay_status', 1)->where('order_type', 1)->sum('pay_amount');
                // 下级派单金额
                $all_price += $db->where('proxy_id', $datum)->where('order_type', 1)->sum('pay_amount');
                // 下级今日收单数
                $todayn += $db->where('proxy_id', $datum)->where('pay_status', 1)->whereTime('pay_time', 'today')->where('order_type', 1)->count();
                // 下级昨日收单数
                $yesterdayn += $db->where('proxy_id', $datum)->where('pay_status', 1)->whereTime('pay_time', 'yesterday')->where('order_type', 1)->count();
                // 下级本周收单数
                $weekn += $db->where('proxy_id', $datum)->where('pay_status', 1)->whereTime('pay_time', 'week')->where('order_type', 1)->count();
                // 下级今日入金
                $today += $db->where('proxy_id', $datum)->where('pay_status', 1)->whereTime('pay_time', 'today')->where('order_type', 1)->sum('pay_amount');
                // 下级昨日入金
                $yesterday += $db->where('proxy_id', $datum)->where('pay_status', 1)->whereTime('pay_time', 'yesterday')->where('order_type', 1)->sum('pay_amount');
                // 下级本周入金
                $week += $db->where('proxy_id', $datum)->where('pay_status', 1)->whereTime('pay_time', 'week')->where('order_type', 1)->sum('pay_amount');
                // 下下级ID集
                $sub = array_filter(explode(',', $subordinate));
                $sub ? getTree($sub, $datum) : '';
            }
            // 代理商
            $data['user']['name'] = $user['merchant_cname'] . '_' . $user['id'];
            // 上次登录时间
            $data['user']['login_time'] = date('Y.m.d H:i:s', $user['login_time']);
            // 收单
            $data['user']['success_num'] = $success_num;
            // 总收单
            $data['user']['all_num'] = $all_num;
            // 收单率
            $data['user']['success_rate'] = $all_num ? number_format($success_num / $all_num * 100, 2) : '0.00';
            // 收单金额
            $data['user']['success_price'] = number_format($success_price / 100, 2);
            // 总收单
            $data['user']['all_price'] = number_format($all_price / 100, 2);
            // 总入金
            $data['entry']['all_price'] = $data['user']['success_price'];
            // 今日入金
            $data['entry']['today'] = number_format($today / 100, 2);
            // 昨日入金
            $data['entry']['yesterday'] = number_format($yesterday / 100, 2);
            // 本周入金
            $data['entry']['week'] = number_format($week / 100, 2);
            // 总订单
            $data['order']['all_num'] = $success_num;
            // 今日订单
            $data['order']['today'] = $todayn;
            // 昨日订单
            $data['order']['yesterday'] = $yesterdayn;
            // 本周订单
            $data['order']['week'] = $weekn;
            return $data;
        }

        return getTree($sub, $this->login_user['id']);
    }

    // 首页代理
    public function index_daili($bool = false)
    {
        $sub = Db::name('users')->where('id', $this->login_user['id'])->value('subordinate');
         $sub = array_filter(explode(',', trim($sub,',')));
        $data = [];
        function getXiaJi($arr, $pid)
        {
            $db = Db::name('mch_order');
            $success_num = $db->where('proxy_id', $pid)->where('pay_status', 1)->where('order_type', 1)->count();
            $all_num = $db->where('proxy_id', $pid)->where('order_type', 1)->count();
            $success_price = $db->where('proxy_id', $pid)->where('pay_status', 1)->where('order_type', 1)->sum('pay_amount');
             foreach ($arr as $datum) {
                // 上级信息
                $subordinate = Db::name('users')->where('id', $datum)->value('subordinate');
                $success_num += $db->where('proxy_id', $datum)->where('pay_status', 1)->where('order_type', 1)->count();
                $all_num += $db->where('proxy_id', $datum)->where('order_type', 1)->count();
                $success_price += $db->where('proxy_id', $datum)->where('pay_status', 1)->where('order_type', 1)->sum('pay_amount');
                $sub = array_filter(explode(',', $subordinate));
                $sub ? getXiaJi($sub, $datum) : '';
            }
            // 下级ID
            $data['id'] = $pid;
            // 收单率
            $data['success_rate'] = $all_num ? number_format($success_num / $all_num * 100, 2) : '0.00';
            // 收单金额
            $data['success_price'] = number_format($success_price / 100, 2);
            return $data;
        }

        $data = [];
        // 下级
        foreach ($sub as $ke => $item) {
            $sun = Db::name('users')->where('id', $item)->field('subordinate,merchant_cname')->find();
            if ($sun) {
                $arr = array_filter(explode(',', $sun['subordinate']));
                // 获取下级
                $dai = getXiaJi($arr, $item);
                $price = $dai['success_price'];
                $rate = $dai['success_rate'];
                if ($bool) {
                    $data[$ke]['id'] = $item;
                    $data[$ke]['name'] = $sun['merchant_cname'] . '_' . $item;
                    $data[$ke]['price'] = $price ? $price : '0.00';
                    $data[$ke]['rate'] = $rate ? $rate : '0.00';
                } elseif (!$bool && $ke < 3) {
                    $data[$ke]['id'] = $item;
                    $data[$ke]['name'] = $sun['merchant_cname'] . '_' . $item;
                    $data[$ke]['price'] = $price ? $price : '0.00';
                    $data[$ke]['rate'] = $rate ? $rate : '0.00';
                }
            }

        }
        return $data;
    }

    // 代理信息
    public function agent()
    {
        // $redis = new Redis();
        $id = $this->login_user['id'];
        if (cache::get('magent_data_daili_' . $id)) {
            $data = cache::get('magent_data_daili_' . $id);
        } else {
            $data = $this->index_daili(true);
            cache::set("magent_data_daili_" . $id, $data, 600);
        }
        $page = input('post.page/d', 1);
        $limit = 12;
        $list = [];
        foreach ($data as $ke => $val) {
            if ($ke >= ($page - 1) * $limit && $ke < $page * $limit) {
                $list[] = $val;
            }
        }
        $this->assign('data', $list);
        return $this->fetch();
    }

     // 清除缓存
    public function clearData()
    {
        // $redis = new Redis();
        $id = $this->login_user['id'];
        Cache::rm('magent_data_index_' . $id);
        Cache::rm('magent_data_daili_' . $id);
        return iconv("GB2312", "UTF-8", '清除成功');
    }

    // 更新缓存
    public function updateData()
    {
        $this->index(true);
        return iconv("GB2312", "UTF-8", '更新成功');
    }

    // 代理详情
    public function agent_details($id)
    {
        $user = Db::table('users')
            ->alias('u')
            ->field('a.*,u.id,u.email,u.name,u.join_time,u.login_time,u.company,u.merchant_cname,u.state,u.bans_num,l.name as level_name,l.operat,l.text,u.subordinate')
            ->join('assets a', 'a.uid=u.id', 'left')
            ->join('level l', 'l.code=u.state')
            ->find($id);
        $mch_orderModel = Db::name('mch_order');
        $user['count'] = $mch_orderModel
            ->where('proxy_id', $user['id'])
            ->where('order_type', 1)
            ->count();
        $user['succ_count'] = $mch_orderModel
            ->where('proxy_id', $user['id'])
            ->where('order_type', 1)
            ->where('pay_status', 1)
            ->count();
        $user['count_sum'] = $mch_orderModel
            ->where('proxy_id', $user['id'])
            ->where('order_type', 1)
            ->sum('pay_amount');
        $user['succ_count_sum'] = $mch_orderModel
            ->where('proxy_id', $user['id'])
            ->where('order_type', 1)
            ->where('pay_status', 1)
            ->sum('pay_amount');
        $subordinate = $id . ',' . $this->getBottomUsers($id);
        $user['today'] = Db::table('mch_order')
            ->where('pay_status', 1)
            ->where('order_type', 1)
            ->where('proxy_id', 'in', $subordinate)
            ->whereTime('pay_time', 'today')
            ->sum('pay_amount');
        $user['code'] = $this->code_num($id);
        $user['channel_list'] = $this->add_user_fee();
        $user['channel'] = Db::name('user_fee')
            ->alias('uf')
            ->field('uf.uid,uf.taid,uf.fee,uf.status,c.channel_name')
            ->join('channel_type c', 'c.id=uf.taid', 'right')
            ->where('uid', $user['id'])
            ->select();
//        dump($user);
        $this->assign('info', $user);
        return $this->fetch();
    }

    //获取挂码的数量
    public function code_num($id)
    {
        $subordinate = $id . ',' . $this->getBottomUsers($id);
        //总数
        $device = Db::table('top_account_assets')
            ->where('uid', 'in', $subordinate)
            ->count();
        $status = Db::table('top_account_assets')
            ->where('uid', 'in', $subordinate)
            ->where('is_clerk', '<>', 1)
            ->where('status', 1)
            ->count();
        $top_data = Db::table('top_account_assets')
            ->field('app_id')
            ->where('uid', 'in', $subordinate)
            ->select();
        $app_id_count = 0;
        foreach ($top_data as $k => $v) {
            if (cache('DeviceNo' . $v['app_id'])) {
                $app_id_count += 1;
            }
        }
        return $app_id_count . '/' . $device . '/' . $status;
    }

    public function getBottomUsers($id, $uids = '')
    {
        $userList = Db::table('users')
            ->field('id,superior')
            ->where('superior', $id)
            ->select();
        foreach ($userList as $key => $value) {
            $uids .= $value['id'] . ',';
            $user = Db::table('users')
                ->field('id,superior')
                ->where('superior', $id)
                ->select();
            if ($user) {
                $uids = $this->getBottomUsers($value['id'], $uids);
            }
        }
        return $uids;
    }

    // 开关收款功能
    public function update_open_pay()
    {
        if (!request()->isAjax()) {
            return $this->index();
        }

        //先判断当前用户是否开启了收款功能
        $is_open = Db::table('assets')
            ->where('uid', $this->login_user['id'])
            ->limit(1)
            ->value('is_open');

        if ($is_open == 2) {

            return ['code' => '111', 'msg' => '你的收款功能被关闭，暂时不能进行此操作'];

        }


        $id = input('post.id');
        $is_open = Db::table('assets')->where('uid', $id)->value('is_open');
        if ($is_open == 1) {
            $status = 2;
            $msg = '已关闭收款功能';
            $msg1 = '代理关闭收款功能';
        } else {
            $status = 1;
            $msg = '已开启收款功能';
            $msg1 = '代理开启收款功能';
        }
        $bool = Db::table('assets')->where('uid', $id)->update(['is_open' => $status]);
        if ($bool) {
            //添加操作日志
            $bool9 = Db::table('record')->insert([
                'date' => date('Y-m-d H:i:s'),
                'content' => $msg1,
                'time' => time(),
                'operator' => $this->login_user['id'],
                'child_id' => $id,
                'money' => 0,
                'type' => 6
            ]);
            return ['code' => '0000', 'msg' => $msg];
        } else {
            return ['code' => '1111', 'msg' => '操作失败，请稍后重试'];
        }

    }

    // 上下分
    public function debit_money()
    {
        if (!request()->isAjax()) {
            echo '非法请求';
            die;
        }

        if (!in_array($this->login_user['state'], [90])) {
            return ['code' => 20001, 'msg' => '权限不足'];
            exit;
        }

        $data = input();

        $result = $this->validate($data,
            [
                'pass|pass' => 'require',
                'money|money' => 'require|number',
                'id|id' => 'require',
                'text1|text1' => 'require',

            ]);
        //验证判断必填项
        if (true !== $result) {
            // 验证失败 输出错误信息
            return ['code' => 20001, 'msg' =>'不能留空哦'];
            exit;
        }

        $trading_pass = Db::table('users')->where('id',$this->login_user['id'])->limit(1)->value('trading_pass');
  
        if (encryption($data['pass']) != $trading_pass) {
            return ['code' => 20001, 'msg' => '交易密码错误'];
            exit;

        }
      
      	$money = $data['money'];
        $data['money'] = $data['money'] * 100;
        
		$uid = $this->login_user['id'];
        Db::startTrans();

      	$assetsModel = Db::name('assets');
        if($data['money']>0){
            //先判断自己的保证金是否充足，再给用户加分
            $user_money = $assetsModel->where('uid',$uid)->limit(1)->value('margin');

            if($user_money < $data['money']){
                 return ['code'=>20001,'msg'=>'自身保证金不足以给用户添加'.$money.'元'];exit;
            }

            $bool1 = $assetsModel->where('uid',$data['id'])->setInc('margin',$data['money']);
            $bool2 = $assetsModel->where('uid',$uid)->setDec('margin',$data['money']);
        }else{

            //先判断代理的保证金是否充足，在给用户下分
            $user_money = $assetsModel->where('uid',$data['id'])->limit(1)->value('margin');
            $data['money'] = abs($data['money']);
            if($user_money < $data['money']){
                return ['code'=>20001,'msg'=>'用户保证金不足'.$money.'元'];exit;
            }

            $bool1 = $assetsModel->where('uid',$data['id'])->setDec('margin',$data['money']);
            $bool2 = $assetsModel->where('uid',$uid)->setInc('margin',$data['money']);

        }


        $bool9 = Db::name('record')->insert([
            'date' => date('Y-m-d H:i:s'),
            'content' => $data['text1'],
            'time' => time(),
            'operator' => $this->login_user['id'],
            'child_id' => $data['id'],
            'money' => $money,
            'type' => 2
        ]);

        if ($bool1 && $bool9) {
             $data = ['code' => '0000', 'msg' =>'增加成功'];
            Db::commit();
        } else {
            $data = ['code' => '0000', 'msg' => '增加失败'];
            Db::rollback();
        }

        return $data;
    }

   //增加通道
    public function add_user_fee()
    {
        if (!in_array($this->login_user['state'], [90])) {
            echo '权限不足，请联系管理员';
            die;
        }
        if (request()->isPost()) {
            
            $type = input('post.channel/d');
            $fee = input('post.fee/f');
            $uid = input('post.uid/d');
            $user_feeModel = Db::name('user_fee');
            $ufee = $user_feeModel->where('uid', $this->login_user['id'])->where('taid', $type)->value('fee');
            if ($user_feeModel->where('uid', $uid)->where('taid', $type)->value('fee'))
                return ['code' => '1111', 'msg' =>'该通道已添加'];
            if ($fee > $ufee)
                return ['code' => '1111', 'msg' =>'费率不能比上级大'];
            if ($fee >= 1)
                return ['code' => '1111', 'msg' =>'费率不能大于1'];
            $res = $user_feeModel->insert(['uid' => $uid, 'taid' => $type, 'fee' => $fee]);
            if ($res)
                return ['code' => '0000', 'msg' => '添加成功'];
        }
        $user_fee = Db::name('user_fee')->where('uid', $this->login_user['id'])->select();
        $taid = '';
        if (!empty($user_fee)) {
            foreach ($user_fee as $k => $v) {
                $taid .= $v['taid'] . ',';
            }
        }
        $channel = Db::name('channel_type')
            ->where('id', 'in', $taid)
            ->select();
        return $channel;

    }
}